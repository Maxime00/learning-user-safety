#!/usr/bin/env python3

import pandas as pd
import numpy as np
import pickle
import rospy
import time
import sys
import os
import matplotlib.pyplot as plt
import state_representation as sr
from controllers import create_joint_controller, create_cartesian_controller, CONTROLLER_TYPE
from dynamical_systems import create_cartesian_ds, DYNAMICAL_SYSTEM_TYPE
from network_interfaces.control_type import ControlType
from network_interfaces.zmq.network import CommandMessage
from learning_safety_margin.robot_interface import RobotInterface
from ruckig import InputParameter, Ruckig, Trajectory, Result, OutputParameter

from sensor_msgs.msg import JointState
from std_msgs.msg import Header
from std_msgs.msg import Float64MultiArray

from learning_safety_margin.cbf_mpc_vel_planner import *
from learning_safety_margin.vel_control_utils import *
from scipy import interpolate
from pyquaternion import Quaternion

def convert_joint_state_msg(state):
    # Convert sr.joint_state msg to ros JointState msg
    header = Header()
    header.stamp = rospy.get_rostime()
    #header.frame_id = state.get_reference_frame() # is this important ??
    names = state.joint_state.get_names()
    pos = state.joint_state.get_positions()
    vel = state.joint_state.get_velocities()
    effort = state.joint_state.get_torques()
    msg = JointState(header, names, pos, vel, effort)

    return msg


def control_loop(planner, robot, freq):

    # create publisher
    pub = rospy.Publisher('/cmd_mpc', Float64MultiArray, queue_size=10)

    rate = rospy.Rate(freq)
    while not rospy.is_shutdown():

        state = robot.get_state()

        if not state:
            continue

        ## TODO : plan trajectory and publish cmd_mpc


        # Publish joint states for recording
        pub.publish(convert_joint_state_msg(state))

        rate.sleep()


# Controller to replay demonstrations
if __name__ == '__main__':

    rospy.init_node("test", anonymous=True)

    # Check passed argument - User number
    if len(sys.argv) >= 2:
        user_number = sys.argv[1]
    else:
        user_number = '0'

    print("Running one_traj MPC Controller for User_"+user_number+"\n")

    # Get data
    data_dir = "/home/ros/ros_ws/src/learning_safety_margin/data/User_"+user_number+"/"

    data = pickle.load(open(data_dir + "vel_data_dict.p", "rb"))

    # Set up data for MPC planner
    params = data["theta"]
    bias_param = data["bias"]
    slack_param = data["unsafe_slack"]
    bias_param = 0.1

    # Initialize RBF Parameters
    # print(ws_lim, x_dim, n_dim_features, rbf_std)
    centers, stds = rbf_means_stds(X=None, X_lim=np.array([x_lim, y_lim, z_lim, vdot_lim, vdot_lim, vdot_lim]),
                                   n=x_dim, k=n_dim_features, fixed_stds=True, std=rbf_std)

    # SET PARAMETERS FOR MPC CONTROL
    freq = 100
    dt = 0.1  # 1./freq
    n_steps = 40

    # Init MPC controller
    print("Instantiating MPC Planner, should take around %s seconds... \n"%(n_steps/2))
    instantiate_start = time.time()
    mpc_planner = CBFMPC_Controller(centers, stds, params, bias_param, dt=dt, n_steps=n_steps)
    print("FINISH INSTANTIATING MPC PLANNER IN %s seconds \n" % (time.time() - instantiate_start))

    # Set save dir and create folder if needed
    save_dir = data_dir + "MPC/"
    if not os.path.isdir(save_dir):
        os.mkdir(save_dir)

    # Connect to robot and start control loop
    robot_interface = RobotInterface("*:1701", "*:1702")
    control_loop(mpc_planner, robot_interface, freq)
