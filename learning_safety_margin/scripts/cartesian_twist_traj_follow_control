#!/usr/bin/env python3

import numpy as np
import rospy
import time
import state_representation as sr
from controllers import create_cartesian_controller, CONTROLLER_TYPE
from dynamical_systems import create_cartesian_ds, DYNAMICAL_SYSTEM_TYPE
from network_interfaces.control_type import ControlType
from network_interfaces.zmq.network import CommandMessage
from learning_safety_margin.robot_interface import RobotInterface

import matplotlib.pyplot as plt
import pickle
from learning_safety_margin.cbf_mpc_pos_planner import *
from learning_safety_margin.control_utils import *

def control_loop(traj_pos, traj_torques, robot, freq):

    command = CommandMessage()
    command.control_type = [ControlType.EFFORT.value]

    ds = create_cartesian_ds(DYNAMICAL_SYSTEM_TYPE.POINT_ATTRACTOR)
    ds.set_parameter_value("gain", [50., 50., 50., 10., 10., 10.], sr.ParameterType.DOUBLE_ARRAY)

    ctrl = create_cartesian_controller(CONTROLLER_TYPE.COMPLIANT_TWIST)
    ctrl.set_parameter_value("linear_principle_damping", 80., sr.ParameterType.DOUBLE) # 100 100 5 5 - good: 80 80 5 5
    ctrl.set_parameter_value("linear_orthogonal_damping", 80., sr.ParameterType.DOUBLE) # 35 35 2. 2.5
    ctrl.set_parameter_value("angular_stiffness", 5., sr.ParameterType.DOUBLE)
    ctrl.set_parameter_value("angular_damping", 5., sr.ParameterType.DOUBLE)

    flag = 0
    init_target_set = False
    pos_error_threshold = 0.15
    # Setting initial pose as target flag
    nIter = 0

    #data to plot
    actual_position = np.zeros((10000,7))

    rate = rospy.Rate(freq)
    while not rospy.is_shutdown():
        state = robot.get_state()

        if not state:
            continue

        print("EEF position: ", state.ee_state.get_position())
        print("EEF orientation: ", state.ee_state.get_orientation())
        print("INDEX :", nIter)
        print("FLAG :", flag)

        if flag == 0 :
            ## -------------GO TO INIT POSITION -------------------

            # Set init pose as target
            if not init_target_set:
                print("REF FRAME :", state.ee_state.get_reference_frame())
                init_pos = sr.CartesianPose(state.ee_state.get_name(), traj_pos[0,0:3], traj_pos[0,3:7],
                                          state.ee_state.get_reference_frame())
                ds.set_parameter_value("attractor", init_pos, sr.ParameterType.STATE, sr.StateType.CARTESIAN_POSE)
                init_target_set = True

            # CHECK IF REACHED INITIAL POSITION
            error= np.linalg.norm(init_pos.data()[0:3] - state.ee_state.get_position())
            print("Error:", error)
            if error < pos_error_threshold:
                print("REACHED START POSITION : ", traj_pos[0,:])
                current_target = sr.CartesianPose(state.ee_state.get_name(), traj_pos[nIter+1, 0:3], traj_pos[nIter+1, 3:7],
                                                  state.ee_state.get_reference_frame())
                ds.set_parameter_value("attractor", current_target, sr.ParameterType.STATE, sr.StateType.CARTESIAN_POSE)
                flag = 1
                rospy.sleep(1.0)
                timeZero = time.time()
                continue

            twist = sr.CartesianTwist(ds.evaluate(state.ee_state))
            print("Twist pose : ", twist.data())
            twist.clamp(.25, .5)
            print("Twist pose after clamp : ", twist.data())
            command_torques = sr.JointTorques(ctrl.compute_command(twist, state.ee_state, state.jacobian))
            command.joint_state = state.joint_state
            command.joint_state.set_torques(command_torques.get_torques())
            robot.send_command(command)
            print("Command Torques:", command.joint_state.get_torques())


        if flag ==1:
            ## ---------------- FOLLOW TRAJECTORY --------------------

            # CHECK IF REACHED FINAL POSITION
            error = np.linalg.norm(traj_pos[-1, 0:3]- state.ee_state.get_position())
            print("Error:", error)
            if error < 0.05:#pos_error_threshold:
                print("REACHED FINAL POSITION : ", traj_pos[-1, :])
                init_target_set = False # reset target for ds
                flag = 2
                nIter =0
                timeZero = time.time()
                continue

            if nIter+2 > len(traj_pos[:, 0]):
                print("REACHED END OF PLANNED TRAJ ")
                flag =2
                continue

            ### Follow moving target

            # Update nIter LOGIC
            state_to_target_error = np.linalg.norm(state.ee_state.get_position() - traj_pos[-1, 0:3])
            state_diff = np.linalg.norm(state.ee_state.get_position() - traj_pos[nIter, 0:3])
            next_state_diff = np.linalg.norm(state.ee_state.get_position()- traj_pos[nIter+1, 0:3])
            print("state diff: ", state_diff)
            print(" next state diff: ", next_state_diff)
            print(" diff diff: ", next_state_diff - state_diff)

            if (next_state_diff - state_diff ) >= -1e-4 :##round(next_state_diff,4) <= round(state_diff,4):  # move to next state
                print("Going to next state ! \n")
                nIter += 1

                # Set current target
                current_target = sr.CartesianPose(state.ee_state.get_name(), traj_pos[nIter, 0:3], traj_pos[nIter, 3:7],
                                                  state.ee_state.get_reference_frame())
                ds.set_parameter_value("attractor", current_target, sr.ParameterType.STATE, sr.StateType.CARTESIAN_POSE)

            twist = sr.CartesianTwist(ds.evaluate(state.ee_state))
            print("Twist pose : ", twist.data())
            twist.clamp(.25, .5)
            print("Twist pose after clamp : ", twist.data())
            command_torques = sr.JointTorques(ctrl.compute_command(twist, state.ee_state, state.jacobian))
            command.joint_state = state.joint_state
            command.joint_state.set_torques(command_torques.get_torques())
            robot.send_command(command)
            print("Command Torques:", command.joint_state.get_torques())

            #get data to plot
            actual_position[nIter, :] = state.ee_state.get_pose()


            ###Just send torques -- DOES NOT WORK
            # command_torques_demo = traj_torques[nIter, :]
            # command.joint_state = state.joint_state
            # command.joint_state.set_torques(command_torques_demo)
            # robot.send_command(command)
            # print("Command Torques:", command.joint_state.get_torques())
            #
            # nIter +=1
            # print("INDEX :", nIter)

        if flag == 2:
            ## ---------------------- DO PLOTS ----------

            np.savetxt(data_dir + "recorded_eePose.txt", actual_position, delimiter=",")

            for i in range(0,3) : #Each dimension
                plt.figure()
                plt.plot(actual_position[:,i], label ="actual position")
                plt.plot(traj_pos[:,i], label="reference position")
                plt.title("Cartesian EEF position in dim "+str(i+1))
                plt.legend()
            plt.show()

        rate.sleep()


if __name__ == '__main__':
    rospy.init_node("test", anonymous=True)

    robot_interface = RobotInterface("*:1701", "*:1702")

    data_dir = "/home/ros/ros_ws/src/learning_safety_margin/data/example_traj_to_replay/csv/"
    f_vel = data_dir + "1_jointVelocities.txt"
    f_pos = data_dir + "1_eePosition.txt"
    f_torques = data_dir + "1_jointTorques.txt"

    traj_vel = np.loadtxt(f_vel, delimiter=',')
    traj_pos = np.loadtxt(f_pos, delimiter=',')
    traj_torques = np.loadtxt(f_torques, delimiter=',')

    control_loop(traj_pos, traj_torques, robot_interface, 1000)
