#!/usr/bin/env python3

import numpy as np
import rospy
import state_representation as sr
from controllers import create_cartesian_controller, CONTROLLER_TYPE
from dynamical_systems import create_cartesian_ds, DYNAMICAL_SYSTEM_TYPE
from network_interfaces.control_type import ControlType
from network_interfaces.zmq.network import CommandMessage
from learning_safety_margin.robot_interface import RobotInterface

import pickle
from learning_safety_margin.cbf_mpc_pos_planner import *
from learning_safety_margin.control_utils import *

def control_loop(robot, freq):
    target_set = False
    command = CommandMessage()
    command.control_type = [ControlType.EFFORT.value]

    ds = create_cartesian_ds(DYNAMICAL_SYSTEM_TYPE.POINT_ATTRACTOR)
    ds.set_parameter_value("gain", [50., 50., 50., 10., 10., 10.], sr.ParameterType.DOUBLE_ARRAY)

    ctrl = create_cartesian_controller(CONTROLLER_TYPE.COMPLIANT_TWIST)
    ctrl.set_parameter_value("linear_principle_damping", 80., sr.ParameterType.DOUBLE) # 100 100 5 5 - good: 80 80 5 5
    ctrl.set_parameter_value("linear_orthogonal_damping", 80., sr.ParameterType.DOUBLE) # 35 35 2. 2.5
    ctrl.set_parameter_value("angular_stiffness", 5., sr.ParameterType.DOUBLE)
    ctrl.set_parameter_value("angular_damping", 5., sr.ParameterType.DOUBLE)

    rate = rospy.Rate(freq)
    while not rospy.is_shutdown():
        state = robot.get_state()

        if not state:
            continue
        print("EEF position: ", state.ee_state.get_position())
        print("EEF orientation: ", state.ee_state.get_orientation())

        if not target_set:
            # TODO : get traget from demos ??
            target = sr.CartesianPose(state.ee_state.get_name(), np.array([.5, .0, .5]), np.array([0., 1., 0., 0.]),
                                      state.ee_state.get_reference_frame())
            ds.set_parameter_value("attractor", target, sr.ParameterType.STATE, sr.StateType.CARTESIAN_POSE)
            target_set = True
        else:
            # get desired twist from MPC planner
            #X, U = planner.control(state.ee_state.get_position(), target.data()[:3])

            #print("MPC velocity command : ", U[:,1])
            #twist = sr.CartesianTwist(name=state.ee_state.get_name(), linear_velocity=np.array(U[:, 1]),
            #                          reference=state.ee_state.get_reference_frame())

            twist = sr.CartesianTwist(ds.evaluate(state.ee_state))
            print("Twist pose : ", twist.data() )
            twist.clamp(.25, .5)
            print("Twist pose after clamp : ", twist.data())
            command_torques = sr.JointTorques(ctrl.compute_command(twist, state.ee_state, state.jacobian))
            command.joint_state = state.joint_state
            command.joint_state.set_torques(command_torques.get_torques())
            robot.send_command(command)
            print("Command Torques:", command.joint_state.get_torques())
        rate.sleep()


if __name__ == '__main__':
    rospy.init_node("test", anonymous=True)

    robot_interface = RobotInterface("*:1701", "*:1702")

    # Set up data path
    # data_dir = "/home/ros/ros_ws/src/learning_safety_margin/data/User_1/"
    # # TODO : make user specific ! Figure out hwo to pass argument using launch file
    #
    # data = pickle.load(open(data_dir + "data_dict.p", "rb"))
    # params = data["theta"]
    # bias_param = data["bias"]
    # slack_param = data["unsafe_slack"]
    # bias_param = 0.1
    #
    # # Initialize RBF Parameters
    # print(ws_lim, x_lim, y_lim, z_lim, x_dim, n_dim_features, rbf_std)
    # centers, stds = rbf_means_stds(X=None, X_lim=np.array([x_lim, y_lim, z_lim]),
    #                                n=x_dim, k=n_dim_features, fixed_stds=True, std=rbf_std)
    #
    # mpc_planner = CBFMPC_Controller(centers, stds, params, bias_param, n_steps=10)

    control_loop(robot_interface, 100)
