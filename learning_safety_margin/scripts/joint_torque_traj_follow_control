#!/usr/bin/env python3

import numpy as np
import pandas as pd
import rospy
import time
import matplotlib.pyplot as plt
import state_representation as sr
from controllers import create_joint_controller, CONTROLLER_TYPE
from dynamical_systems import create_cartesian_ds, DYNAMICAL_SYSTEM_TYPE
from network_interfaces.control_type import ControlType
from network_interfaces.zmq.network import CommandMessage
from learning_safety_margin.robot_interface import RobotInterface

from sensor_msgs.msg import JointState
from std_msgs.msg import Header

def convert_joint_state_msg(state):
    # Convert sr.joint_state msg to ros JointState msg
    header = Header()
    header.stamp = rospy.get_rostime()
    #header.frame_id = state.get_reference_frame() # is this important ??
    names = state.joint_state.get_names()
    pos = state.joint_state.get_positions()
    vel = state.joint_state.get_velocities()
    effort = state.joint_state.get_torques()
    msg = JointState(header, names, pos, vel, effort)

    return msg

def find_closest_time(df, time):
    dist = (df['time'] - time).abs()
    return df.loc[dist.idxmin()]

def plot_ref_vs_rec(ref, rec):

    traj_name ="test"

    # Formatting for ease
    rec_time = rec[:, 0]
    ref_time = ref[:,0]

    rec_pos = rec[:, 1:8]
    ref_pos = ref[:, 1:8]
    rec_ref_pos = rec[:, 15:22]
    error_pos = rec_pos - rec_ref_pos

    rec_vel = rec[:, 8:15]
    ref_vel = ref[:,8:15]
    rec_ref_vel = rec[:, 22:29]
    error_vel = rec_vel - rec_ref_vel

    # Plot reference and state
    fig, axs = plt.subplots(4, 2)
    fig.suptitle("Joint state and reference of '{}'".format(traj_name))

    for i, ax in enumerate(axs.ravel()[:-1]):
        ax.plot(rec_time[:], rec_pos[:, i])
        ax.plot(ref_time[:], ref_pos[:, i], label=":")
        ax.set(ylabel="joint {}".format(i))
        ax.set(xlabel="Time [sec]")
        ax.legend()

    # Plot position error
    fig, axs = plt.subplots(4, 2)
    fig.suptitle("Joint position error of '{}'".format(traj_name))

    for i, ax in enumerate(axs.ravel()[:-1]):
        ax.plot(rec_time, error_pos[:, i])
        ax.set(ylabel="joint {}".format(i))
        ax.set(xlabel="Time [sec]")

    # Plot velocities and reference
    fig, axs = plt.subplots(4, 2)
    fig.suptitle("Joint Velocities and reference of '{}'".format(traj_name))

    for i, ax in enumerate(axs.ravel()[:-1]):
        ax.plot(rec_time, rec_vel[:, i])
        ax.plot(ref_time, ref_vel[:, i], ":")
        ax.set(ylabel="joint {}".format(i))
        ax.set(xlabel="Time [sec]")

    # Plot velocity error
    fig, axs = plt.subplots(4, 2)
    fig.suptitle("Joint Velocity error of '{}'".format(traj_name))

    for i, ax in enumerate(axs.ravel()[:-1]):
        ax.plot(rec_time, error_vel[:, i])
        ax.set(ylabel="joint {}".format(i))
        ax.set(xlabel="Time [sec]")

    plt.show()


def control_loop(traj, robot, freq):

    # create publisher
    pub = rospy.Publisher('/joint_states', JointState, queue_size=10)


    command = CommandMessage()
    command.control_type = [ControlType.EFFORT.value]
    #
    # ds = create_cartesian_ds(DYNAMICAL_SYSTEM_TYPE.POINT_ATTRACTOR)
    # ds.set_parameter_value("gain", [50., 50., 50., 10., 10., 10.], sr.ParameterType.DOUBLE_ARRAY)

    # SET UP controller
    nb_joints = 7
    ctrl = create_joint_controller(CONTROLLER_TYPE.IMPEDANCE, nb_joints)

    ctrl.set_parameter_value("stiffness", [220, 220, 220, 180, 120, 120, 100], sr.ParameterType.DOUBLE_ARRAY)
    ctrl.set_parameter_value("damping", [15, 15, 15, 13, 11, 10, 8], sr.ParameterType.DOUBLE_ARRAY)
    # ctrl.set_parameter_value("stiffness", [10., 5., 4., 2., 2, 2, 2], sr.ParameterType.DOUBLE_ARRAY)
    # ctrl.set_parameter_value("damping", [3., 2., 2., 1., .5, .5, .5], sr.ParameterType.DOUBLE_ARRAY)

    # SET UP variables
    desired_state = sr.JointState("franka", nb_joints)
    feedback_state = sr.JointState("franka", nb_joints)

    flag = 0
    init_pos_err_threshold = 0.205
    initial_pos = traj['position'].at[0]
    time_period = 1. / freq

    alpha = 0.99
    dq_filtered = np.zeros(7)

    recorded_state = np.zeros((10000, 1 + nb_joints * 4))* np.nan
    idx= 0

    rate = rospy.Rate(freq)
    while not rospy.is_shutdown():
        state = robot.get_state()

        if not state:
            continue
        print("EEF position: ", state.ee_state.get_position())
        print("EEF orientation: ", state.ee_state.get_orientation())
        print("FLAG : ", flag)

        if flag == 0:
            # ------GO TO START POSITION ------------------------

            error = np.linalg.norm(initial_pos - state.joint_state.get_positions())
            # print("q0: ", q0)
            print("|q-q0| : ", abs(state.joint_state.get_positions() - initial_pos))
            print("Error:", error)

            if error < init_pos_err_threshold:
                print("REACHED START POSITION : ", initial_pos)
                print("ERROR :", error)
                flag = 1

                # Stop robot
                command.joint_state = state.joint_state
                command.joint_state.set_torques(np.zeros(7))
                robot.send_command(command)


                print("WAIT ...")
                rospy.sleep(4.0)
                timeZero = time.time()
                continue

            # Extract form Yang code
            feedback_state.set_positions(state.joint_state.get_positions())
            dq_filtered = (1 - alpha) * dq_filtered + alpha * state.joint_state.get_velocities()
            feedback_state.set_velocities(dq_filtered)

            velo_d = initial_pos - state.joint_state.get_positions()
            # NOTE: this might cause error
            velo_d = velo_d / np.linalg.norm(velo_d) if np.linalg.norm(velo_d) > 1.0 else velo_d
            desired_state.set_velocities(velo_d)

            pos_d = feedback_state.get_positions() + time_period * velo_d
            desired_state.set_positions(pos_d)

            print("Joint positions: ", feedback_state.get_positions())
            print("Joint Velocities: ", feedback_state.get_velocities())
            print("Desired positions: ", desired_state.get_positions())
            print("Desired Velocities: ", desired_state.get_velocities())

            # command = ctrl.compute_command(desired_state, state.joint_state)

            command_torques = sr.JointTorques(ctrl.compute_command(desired_state, feedback_state))
            command.joint_state = state.joint_state
            command.joint_state.set_torques(command_torques.get_torques())

            print("Command:", command.joint_state.get_torques())
            if np.any(command_torques.get_torques() > 30):
                print("TORQUES TOO BIG !!!")
                break

            else :
                robot.send_command(command)



        elif flag == 1:
            #-------FOLLOW TRAJECTORY ---------------------

            # GET current time
            nIter_time = time.time() - timeZero
            print("Time : ", round(nIter_time,4))

            # Check if reached end of traj
            if nIter_time > traj['time'].iat[-1]:
                print("REACHED END OF TRAJ")
                error = np.linalg.norm(traj['position'].iat[-1] - state.joint_state.get_positions())
                print("DISTANCE TO TARGET : ", error)

                flag = 2

                # Stop robot
                command.joint_state = state.joint_state
                command.joint_state.set_torques(np.zeros(7))
                robot.send_command(command)

                print("WAIT ...")
                rospy.sleep(1.0)
                continue

            ## Feedback state
            feedback_state.set_positions(state.joint_state.get_positions())
            # filter velocities
            dq_filtered = (1 - alpha) * dq_filtered + alpha * state.joint_state.get_velocities()
            feedback_state.set_velocities(dq_filtered)

            ## Get desired state from traj
            df_desired = find_closest_time(traj, nIter_time)

            desired_state.set_positions(df_desired['position'])
            desired_state.set_velocities(df_desired['velocity'])

            ## DEBUG prints
            print("Joint positions: ", feedback_state.get_positions())
            print("Joint Velocities: ", feedback_state.get_velocities())
            print("Desired positions: ", desired_state.get_positions())
            print("Desired Velocities: ", desired_state.get_velocities())

            # SAVE current state
            recorded_state[idx, 0] = nIter_time
            recorded_state[idx, 1:8] = state.joint_state.get_positions()
            recorded_state[idx, 8:15] = state.joint_state.get_velocities()
            recorded_state[idx, 15:22] = df_desired['position']
            recorded_state[idx, 22:29] = df_desired['velocity']
            idx+=1

            # Set command torques
            command_torques = sr.JointTorques(ctrl.compute_command(desired_state, feedback_state))
            command.joint_state = state.joint_state
            command.joint_state.set_torques(command_torques.get_torques())

            print("Command:", command.joint_state.get_torques())
            if np.any(command_torques.get_torques() > 30):
                print("TORQUES TOO BIG !!!")
                break

            else:
                robot.send_command(command)

        if flag == 2:
            # ------------END OF TRAJ-> DO PLOTS ------------------------
            # remove zeros
            recorded_state = recorded_state[~np.isnan(recorded_state).any(axis=1)]
            # save file
            np.savetxt(data_dir + "recorded_jointState.csv", recorded_state, delimiter=",")

            # Convert pandas to np.array for plotting - same format as recorded traj
            temp_time = traj['time'].to_numpy()
            temp_pos = traj['position'].to_numpy()
            temp_vel = traj['velocity'].to_numpy()
            reference_arr = np.zeros((len(temp_time), 1+2*nb_joints))
            reference_arr[:, 0] = temp_time
            for i in range(0, (len(temp_pos))):
                reference_arr[i, 1:8] = temp_pos[i]
                reference_arr[i, 8:15] = temp_vel[i]

            plot_ref_vs_rec(reference_arr, recorded_state)

        # Publish joint states for recording
        pub.publish(convert_joint_state_msg(state))

        rate.sleep()


# Controller to replay demonstrations
if __name__ == '__main__':

    rospy.init_node("test", anonymous=True)

    data_dir = "/home/ros/ros_ws/src/learning_safety_margin/data/example_traj_to_replay/csv/"
    f_traj = data_dir + "1_jointTraj.pkl"

    traj = pd.read_pickle(f_traj)
    print("DF shape :",  traj.shape, " \n DF columns :", traj.columns )

    robot_interface = RobotInterface("*:1701", "*:1702")
    control_loop(traj, robot_interface, 200)
